apiVersion: apps/v1
kind: Deployment
metadata:
  name: session
  namespace: {{ default .Release.Namespace .Values.global.defaultNamespace }}
  labels:
    app: session
spec:
  replicas: 1
  selector:
    matchLabels:
      app: session
  template:
    metadata:
      labels:
        app: session
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '5110'
        {{- if .Values.global.linkerd.enabled }}
        linkerd.io/inject: enabled
        {{- end }}
    spec:
      containers:
        - name: session
          image: {{ .Values.image.repository | default .Values.global.image.repository }}/session{{ .Values.image.tag | default .Values.global.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default .Values.global.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 5110
          readinessProbe:
            exec:
              command:
              - /usr/bin/session
              - --healthcheck
            initialDelaySeconds: {{ .Values.global.lumenvox.service.startDelaySeconds }}
            periodSeconds: {{ .Values.global.lumenvox.probes.periodSeconds }}
          {{- if .Values.global.lumenvox.service.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
              - /usr/bin/session
              - --healthcheck
            initialDelaySeconds: {{ .Values.global.lumenvox.service.startDelaySeconds }}
            periodSeconds: {{ .Values.global.lumenvox.probes.periodSeconds }}
          {{- end }}
          resources:
            requests:
              cpu: 5m
              memory: 30Mi
            {{- if .Values.global.lumenvox.enforceLimits }}
            limits:
              cpu: 100m
              memory: 50Mi
            {{- end }}
          envFrom:
            - configMapRef:
                name: timezone-configmap
            {{- if .Values.global.rabbitmq.auth.existingPasswordSecret }}
            - secretRef:
                name: {{ .Values.global.rabbitmq.auth.existingPasswordSecret }}
            {{- end }}
            {{- if .Values.global.redis.auth.existingSecret }}
            - secretRef:
                name: {{ .Values.global.redis.auth.existingSecret }}
            {{- end }}
          env:
            {{- if not .Values.global.rabbitmq.auth.existingPasswordSecret }}
            - name: rabbitmq-password
              value: '{{ .Values.global.rabbitmq.auth.password }}'
            {{- end }}
            {{- if not .Values.global.redis.auth.existingSecret }}
            - name: redis-password
              value: '{{ .Values.global.redis.auth.password }}'
            {{- end }}
            - name: GLOBAL_SETTINGS__CLUSTER_LOG_VERBOSITY
              value: '{{ .Values.global.lumenvox.loggingVerbosity }}'
            - name: LICENSE_SETTINGS__CLUSTER_GUID
              value: '{{ .Values.global.licensing.clusterGuid }}'  
            - name: REDIS_SETTINGS__DEFAULT_TTL
              value: '{{ .Values.global.lumenvox.redisTtl }}'
            - name: RMQ_CA_CERTIFICATE
              value: '{{ .Values.global.rabbitmq.caCertificate }}'
            - name: RMQ_CLIENT_CERTIFICATE
              value: '{{ .Values.global.rabbitmq.clientCertificate }}'
            - name: RMQ_CLIENT_KEY
              value: '{{ .Values.global.rabbitmq.clientKey }}'
            - name: GLOBAL_SETTINGS__RABBITMQ_CONNECTION_STRING
              value: 'amqp{{ if .Values.global.rabbitmq.enableTLS }}s{{ end }}://{{ .Values.global.rabbitmq.connection.user }}:$(rabbitmq-password)@{{ .Values.global.rabbitmq.connection.url }}:{{ .Values.global.rabbitmq.connection.port }}'
            - name: GLOBAL_SETTINGS__RMQ_QUEUE_EXPIRE_MS
              value: '{{ .Values.global.lumenvox.rabbitmqQueueExpirationMs }}'
            - name: CLUSTER_LANGUAGES__ASR_LANGUAGES
              value: '{{ template "lumenvox-speech.CLUSTER_LANGUAGES__ASR_LANGUAGES" . }}'
            - name: CLUSTER_LANGUAGES__TTS_LANGUAGES
              value: '{{ template "lumenvox-speech.CLUSTER_LANGUAGES__TTS_LANGUAGES" . }}'
            {{- if .Values.global.enableItn }}
            - name: CLUSTER_LANGUAGES__ITN_LANGUAGES
              value: '{{ template "lumenvox-speech.CLUSTER_LANGUAGES__ASR_LANGUAGES" . }}'
            {{- end }}
            {{- if .Values.global.enableNlu }}
            - name: CLUSTER_LANGUAGES__NLU_LANGUAGES
              value: 'en'
            {{- end }}
            {{- if .Values.global.enableDiarization }}
            - name: CLUSTER_LANGUAGES__DIARIZATION_LANGUAGES
              value: 'en'
            {{- end }}
            {{- if .Values.global.minimalInstall }}
            - name: SETTINGS__ENABLE_ASR_PROCESSING
              value: 'false'
            {{- end }}
            - name: SERVICE_ADDRESSES__CONFIGURATION_SERVICE
              value: 'http://configuration-service.{{ default .Release.Namespace .Values.global.defaultNamespace }}'
            - name: SERVICE_ADDRESSES__DEPLOYMENT_SERVICE
              value: 'http://deployment-service.{{ default .Release.Namespace .Values.global.defaultNamespace }}'
            - name: SETTINGS__USE_GRAMMAR_MANAGER
              value: 'true'
            - name: SESSION_SETTINGS__API_EXCHANGE
              value: 'BroadcastExchange'
            - name: LOCAL_SETTINGS__ENV
              value: 'dev'
            - name: GOLANG_PROTOBUF_REGISTRATION_CONFLICT
              value: 'ignore'
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
      {{- range .Values.global.imagePullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      initContainers:
        - name: wait-for-deployment-service
          image: {{ .Values.image.repository | default .Values.global.image.repository }}/cloud-init-tools{{ .Values.image.tag | default .Values.global.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default .Values.global.image.pullPolicy }}
          command: ["curl2"]
          args: ["http://deployment-service.{{ default .Release.Namespace .Values.global.defaultNamespace }}:5110/health", "Deployment Service"]
      {{- if .Values.global.lumenvox.schedulerName }}
      schedulerName: {{ .Values.global.lumenvox.schedulerName }}
      {{- end }}
