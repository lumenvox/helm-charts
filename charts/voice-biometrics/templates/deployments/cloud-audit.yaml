apiVersion: apps/v1
kind: Deployment
metadata:
  name: audit
  namespace: {{ default .Release.Namespace .Values.defaultNamespace }}
  labels:
    app: audit
spec:
  replicas: 1
  selector:
    matchLabels:
      app: audit
  template:
    metadata:
      labels:
        app: audit
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '90'
        {{- if .Values.linkerd.enabled }}
        {{- if eq .Values.linkerd.ingressMode "nginx" }}
        linkerd.io/inject: enabled
        {{- else }}
        # Use traefik mode
        linkerd.io/inject: ingress
        {{- end }}
        {{- end }}
    spec:
      containers:
        - name: audit
          image: {{ .Values.image.repository }}/cloud-audit{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: metrics
              containerPort: 90
            - name: grpc
              containerPort: 80
          readinessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: {{ .Values.lumenvox.service.startDelaySeconds }}
            periodSeconds: {{ .Values.probes.periodSeconds }}
          {{- if .Values.lumenvox.service.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: {{ .Values.lumenvox.service.startDelaySeconds }}
            periodSeconds: {{ .Values.probes.periodSeconds }}
          {{- end }}
          resources:
            requests:
              cpu: 30m
              memory: 200Mi
            {{- if .Values.lumenvox.enforceLimits }}
            limits:
              cpu: 250m
              memory: 800Mi
            {{- end }}
          envFrom:
            - configMapRef:
                name: lumenvox-configmap
            {{- if .Values.rabbitmq.auth.existingPasswordSecret }}
            - secretRef:
                name: {{ .Values.rabbitmq.auth.existingPasswordSecret }}
            {{- end }}
          env:
            - name: SERVICE_START_DELAY_SECONDS
              value: '{{ .Values.lumenvox.service.startDelaySeconds }}'
            - name: RABBIT_MQ_CONNECTION_STRING
              value: 'amqp://{{ .Values.rabbitmq.connection.user }}:$(rabbitmq-password)@{{ .Values.rabbitmq.connection.url }}:{{ .Values.rabbitmq.connection.port }}'
            - name: RABBIT_MQ_EASY_CONNECTION_STRING
              value: 'host={{ .Values.rabbitmq.connection.url }};port={{ .Values.rabbitmq.connection.port }};username={{ .Values.rabbitmq.connection.user }};password=$(rabbitmq-password);requestedHeartbeat=10'
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- range .Values.imagePullSecrets }}
        - name: {{ . }}
      {{- end}}
      {{- end }}
      initContainers:
        - name: wait-for-deployment-service
          image: curlimages/curl:latest
          command: ["/bin/sh","-c"]
          args: ["while [ $(curl -sw '%{http_code}' http://deployment-service.{{ default .Release.Namespace .Values.defaultNamespace }}:90/health -o /dev/null) -ne 200 ]; do sleep 2; echo 'Waiting for the Deployment Service...'; done"]
        {{- if .Values.rabbitmq.enabled }}
        - name: wait-for-rabbitmq-service
          image: busybox:1.28
          command: ['sh', '-c', "until nslookup {{ .Values.rabbitmq.connection.url }}; do echo waiting for RabbitMQ Service; sleep 2; done"]
        {{- end }}
        {{- if .Values.rabbitmq.init.checkManagementEndpoint }}
        - name: wait-for-rabbitmq-management-endpoint
          image: curlimages/curl:latest
          command: ["/bin/sh","-c"]
          args: ["while [ $(curl -sw '%{http_code}' http://{{ .Values.rabbitmq.connection.url }}:15672 -o /dev/null) -ne 200 ]; do sleep 2; echo 'Waiting for the RabbitMQ Management Page...'; done"]
        {{- end }}
