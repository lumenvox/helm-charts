# Default values for voice-biometrics.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: "lumenvox"
  pullPolicy: "Always"
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

defaultNamespace: "lumenvox"
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

hostnameSuffix: "testmachine.com"
composeProjectName: ""
lumenvox:
  # Time to allow support services (such as databases) to become available. Typically, 0 in production
  deploymentStartDelaySeconds: 0
  # Maximum amount of time allowed for deployment database connection to succeed
  deploymentReconnectionTimeoutSec: 30

  metrics:
    # Whether to expose internal services' ingress (likely only used by LumenVox development)
    enableEndpoints: false

  # Internally used by LumenVox - should not be enabled by customers
  enableTestEndpoints: false

  service:
    # Time from startup to allow deployment service
    startDelaySeconds: 0
    readinessProbe:
      initialDelaySeconds: 5
    livenessProbe:
      enabled: true
      initialDelaySeconds: 5

  enforceLimits: false

  ingress:
    # Specify an ingressClassName for advanced HTTP ingress configuration (default nginx). Unset to use default ingress
    className:

licensing:
  # Note: licensing (and therefore system) will not work without a valid clusterGuid value
  clusterGuid: "GET-CLUSTER-GUID-FROM-LUMENVOX"
  reportFreqMins: "1440"
  reportSyncHour: "1"
  reportSyncMin: "0"

redis:
  # Specifies whether redis helm chart should be installed
  enabled: true
  auth:
    existingSecret: redis-existing-secret

  connection:
    url: "lumenvox-redis-master.lumenvox"
    port: 6379
  architecture: standalone
  master:
    persistence:
      enabled: false

postgresql:
  # Specifies whether postgresql helm chart should be installed
  enabled: true
  connection:
    url: "lumenvox-postgresql.lumenvox"
    port: 5432
    user: "lvuser"
  postgresqlDatabase: "postgres"
  postgresqlUsername: "lvuser"
  existingSecret: postgres-existing-secret
  commandTimeoutSeconds: 100
  runMigrations: 'true'
  exitAfterMigrations: 'false'
  persistence:
    enabled: false
  persistentVolume:
    storageSize: 2Gi
  image:
    tag: 13

mongodb:
  # Specifies whether mongodb helm chart should be installed
  enabled: true
  architecture: "standalone"
  persistence:
    enabled: false
  auth:
    rootUser: 'lvuser'
    existingSecret: mongodb-existing-secret
  connection:
    url: "lumenvox-mongodb.lumenvox"
    port: 27017
  image:
    # Note using an older version due to incompatibilities on some test machines
    tag: 4.2

rabbitmq:
  # Specifies whether rabbitmq helm chart should be installed
  enabled: true
  ingress:
    enabled: true
    hostname: "rabbitmq.testmachine.com"
    # optional ingressClassName for advanced ingress handling. Comment out to use default ingress
    ingressClassName: "nginx"
  init:
    checkManagementEndpoint: true
  auth:
    username: "lvuser"
    existingPasswordSecret: "rabbitmq-existing-secret"
  connection:
    url: "lumenvox-rabbitmq.lumenvox"
    port: 5672
    user: "lvuser"
  persistence:
    enabled: false
    size: 4Gi

traefik:
  # Specifies whether traefik ingress controller should be installed (recommended as default ingress for LumenVox)
  enabled: true
  namespace: "lumenvox"

  service:
    type: ClusterIP

  ingress:
    kubernetes:
      dashboardEnabled: false

web:
  commonUser: "lvuser"
  commonPass: "iJ3WX7icYL4j3d"

logging:
  enableElasticsearch: false
  defaultLevel: "Information"
  overrideMicrosoftLevel: "Information"
  overrideSystemLevel: "Information"
  overrideGrpcLevel: "Information"

encryption:
  masterEncryptionKey: "mmf8fyVZPL0gSPIqsFXBdWjdy/gdOWWDn+zTT2HaH/U="
  masterKeyProvider: "EnvVariableMasterKeyService"
  useEncryption: true

https:
  cert: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURpRENDQW5DZ0F3SUJBZ0lVS3lVTzhidkE2d3NNcmxOSkZMZDVHTkdnRU0wd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0hERWFNQmdHQTFVRUF3d1JLaTVuWTNCamJIVnpkR1Z5TVM1amIyMHdIaGNOTWpJd01USTFNakV5TVRVegpXaGNOTXpJd01USXpNakV5TVRVeldqQWNNUm93R0FZRFZRUUREQkVxTG1kamNHTnNkWE4wWlhJeExtTnZiVENDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTWJMdklTUlBrYnVpUnNxVUhKVlordkwKdXVEZEdrM1NDMC9VWU5WcTlpYnhlb3VWWlJsUnJ1YWZ6RGhNMWZlWW1nTE1MVWFSTVNXRWc1Uk1YM0NkNG5iWgpMME9ybW5BSWVkK2RScC9rM3RTV3k5YWNXLzlIYlpVM011V1QySFNwUk9SbHhFblFJMWw0Y0hDNGdNQ3Z6dmFsCnBXNEhNWDlNczZPM0pHbEN1S0lJcThyWFBGUHVEVk5ScUkvTGtvd1lBQSs1SHZ3OVZrY05MRm1rWlpRUkdzbGgKV2syWERqc25JVWVKbHlGcWZKV0tHZVdiaWVWbTBiODFsMHJEQm9iL2h2eUdRK0tlYm5yNVZUT1RmQ0g1SGYyVAo2dHVOVGhEbFZ1eTFOOHp3YkhyM1lzSnVwNDJzbVRwcURZdkRCT0hpK0xRQXNpZnAyalNzaXJDOFZPaDF5elVDCkF3RUFBYU9Cd1RDQnZqQWRCZ05WSFE0RUZnUVVVVzNlQnVLclJDNG11UVRVamtKSmQ0VUJGTm93SHdZRFZSMGoKQkJnd0ZvQVVVVzNlQnVLclJDNG11UVRVamtKSmQ0VUJGTm93YXdZRFZSMFJCR1F3WW9JUktpNW5ZM0JqYkhWegpkR1Z5TVM1amIyMkNEMmRqY0dOc2RYTjBaWEl4TG1OdmJZSUpiRzlqWVd4b2IzTjBnakZoWlhSb1pYSXRaRzlqCmF5NW5aWEp0WVc1NWQyVnpkR05sYm5SeVlXd3VZMnh2ZFdSaGNIQXVZWHAxY21VdVkyOXRNQThHQTFVZEV3RUIKL3dRRk1BTUJBZjh3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQU1Ob0RnRWNjMndDams5OU9uY3RDandsV2pHbQp6MEdlbk45OXpTUzBLZXhUUlA0emRrSFlRS2tjT0xac0o4dHV2VFAxMGxpVklvcEVtU29OVHh4MldMZXNlQ3hMCkhPVktMcE5mTHpUNG5samFuUWlvYU1OR1pmZ01mbUJBYVlwekpUM1g5dXBOQUtDVkpwWFZvV0R6dWNRMEttZTEKdnFKTVBIdjNDZGJaVjRqSGQ3QlNTcmh2VnpCVFZXUDdSRFUyNTJkTTR1UEw1Rk15TE03TXRUZGpKMklYdlhmeApZY3hoMTVjZGZlOS90dUxUWkd0L0lGMkZwSGZvUll6Q1ozak80VHVDYU1xOEdxM0hqdTZLUXNNK1ozVUVheTVQCjQ4NE1nNzZkZCsrWGlqbFIyaTlVbWtrZmRuRE9EZlZZY3VpWXFKeGhsMTBVSitmMmZXZ2t3VHNEejVRPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  certKey: "LS0tLS1CRUdJTiBFTkNSWVBURUQgUFJJVkFURSBLRVktLS0tLQpNSUlGSERCT0Jna3Foa2lHOXcwQkJRMHdRVEFwQmdrcWhraUc5dzBCQlF3d0hBUUlKWmpabzNHU1lWZ0NBZ2dBCk1Bd0dDQ3FHU0liM0RRSUpCUUF3RkFZSUtvWklodmNOQXdjRUNDVWU5UzZrNFJONkJJSUV5QkhLUE9nc1ZZMXMKblI3eHhGUzJyZkJVblJraEVmMTlEVzVOdTNSaTk5Y3NQM2czenNsTkhWaUZCOEhzMXRUVWZTSiswTGxUYWNyZwovd0JJYXZDKzFuMVEwb2NMRVJlL1cvdVBCK2o3MjNoRTV3QUUyUWtDYkZOZFh4cHhubTdoYVp1RkZzd29sU2dZCmY0SGNFSnBtQ2xDZzdNcFlPdURGbG9uZ2lVaVlyL1VBaEYweThsQ1ljbHNKaWtyU0VqTWx5R2Y0ZkpTVmUwNzUKdHNEVTdKSitTTzdLZ1ROT0wvV3hTblhiNWQxM1YvYkpZeGpqRSthaWdlN0pSUUVzakFJcWQ0TWNnc1ZUTXdXVApqcDJSdC9lN1J1M2VOdW5KeDdEWVVhZW45QVV2U0g0amJzdmRvS1NOWTdUZW1SQzlBMWQvdXJvS244ZkpEWjFwCnJKaHprSXFWYVh2OGFQWTIvNGtYcVNQMXVPVTFicGttelRTZXlKa3k0cFEvcllwM3hheDU4aGNqWnBoU2NOWWoKbVFuOGd5d2RWTWtmZzJkNzVjOWdsYmI5aEZkTDZ3TkIyZStka1BVSGJodWcvVXYwY2NGdXd1TWR1aUxYMmFsTQpRNk44ZFBtai9PcUdWZjZYdnU0aXBDQ3MxT0N6RlZlT001WENzbG5Ud3FUdTg0VUJ1TnBNTWZKekxtK3Q3M2t0CkJpSnZteDBQcHVTZUtmeVpPZVI4eW5aV1pqazM0UjRrTjdUR2ZTNkhQeVlFbVhTQmtsSTlUMVVuazNQNjBvTTkKd0xweEZoVVhsbjREeGJzYWtKc2pWM0plSlZ0R2NOVmd3THZtLzdjeWM4NmxIVkphbHJRdHV6WGtsTWNrSzhNNQpYc2pPcDIvSzZUdjFzeUFJd1R1T0ZMMHBpcm5XWUVRamFYNEFETGcwbEwrUTFsU1NueWZQU3VtOUNTYmlTcG5aClBjWWFvM1pDWXVJVDcvekJtdGpnN25UbElRUmZGVUsxTHhBRnljN252ZFA2bXNzZUpJK08zTDZjekFFb0RDazYKNk1JaG9wdyszQmYvaTlqK2Fnc2RBQyt6TExwei8vOE9FSU0xaitnMXVMV2VoQU9vc01LNXIrcXZnSk01NGdGaQo2Q3lqdTBjamc3aFdSRisyRkw0eUxsMTZlSXFzVnl3MWtscGc0Mys5N2QwZjVITzcwTTc5cUNpbEcvcCtLMGQ0CkxSR1Y0bkZBdTU4MTNaMjNDN3dPa1MwWW5lZzllNjYrOVgvZVJ1bTNrVU45clpObEpUbjVjNm0vMUV3eUtvZWgKa2JZT1hTYXJPempEeGszQ0lybmpEMlFjT3ZPUTFXZ1BUU0lPUGh0ZVRJNEVPYThpS2pndWNYMzlnVVJyL2VtZwoxYVZCWmZ2ZjVNZzJKV0FUbUVjcllHYktvaXQ4MnZ2SkVuTm9UL3ZuNDdua2JqZU5US2NrcWFQemJoTDAvQ210Cm11ZDQ3WllwemxDRldRNlVqMjJTVy8wdVhoUEVKQ09VY1JSSkUyalRudzBPT28rbnRmdnVPOXFvUi9OR3RlTXcKbG94TjFRZzBzUXo2M1liU3lieUhHWmRRb2JQZyt0ZXJrRElsSzJudnNTMzdvNTIwZ3hmWHZlZWpMQ1B3UXpQcAp4eWV6aTdsVXZJVmM3eitaa1FPbCttVS81UTYzRjhzUExhaUloOWJmdm9wRnVFWElLNXA5d0dWbU1EeVh0Q1FMCmlMSm1mRmVFVE05M2htc2tieVdPRG1sWHRhK1cxOVQrSCtacW5ZRjBWZEIwZUtuSFZ2WGVUZGx3dlIxOTRVanYKa1pWZkxaSUpnN0lxV0Z2cjQ2RENzd2w0OUZiVU8wYlJ5RnN1U2E2NGh1UHluSmNOYklvUmpxOTRhbHJQM1VaaApTbXdDd0lBMTZ1UTEwVnBkdTFqMCtiY3BiRktsbm9lZlhQUVdnNWpMZjd1NHZRbVBsRjBSTm9nSmEwdEdtK1RQCk9ESHRlQmRMT296bkp3R3F2WUEvZWV1ejE2NXdCdHJNZTI2WEE0SmRGK0lNR0M3Mk1IRmgyY2xNMHkxbTJWeGYKak1ZMFBubnlMYkNKbFJZMDFTM1Z3bVlkSm9rSGJtUTk4dDdHWVJscGx1aXJTdkVmd2IvNE9VYWpNNXNwL0tabQphaTVwd0lTT3pDTWFlQU1kQ3NzRS9nPT0KLS0tLS1FTkQgRU5DUllQVEVEIFBSSVZBVEUgS0VZLS0tLS0K"
  certPassword: "Dpin3MVv7qsdkPun"
  useSelfSignedCert: "true"
  applicationDomain: "gcpcluster1.com"
  # cert: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURoRENDQW15Z0F3SUJBZ0lVTktqcmlmcXBSb1FsRXBBeFpaV3hYdytBaE1vd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0d6RVpNQmNHQTFVRUF3d1FLaTVzZFcxbGJuWnZlQzVqYkc5MVpEQWVGdzB5TWpBeE1qRXhOREUxTVRGYQpGdzB6TWpBeE1Ua3hOREUxTVRGYU1Cc3hHVEFYQmdOVkJBTU1FQ291YkhWdFpXNTJiM2d1WTJ4dmRXUXdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRFMyRzhESVZ6MDFPSjBINEV4NGRqWTd4NG0KZGpaZE5BaDlDeTcrYjVyV1BqMytvNVRsTHB0eStLSVRWaEQyWWQybXNVSTZrc29nTTN2bGk1KzQxL2w2ZDg2agpaK1VkaHA4MzZXZ1hHRkliVDJ3ejhzOG5COWxGNjF1clpOWU9ScnZaSFpGVk5oWjVwWEI3K1g2aEFiMGY4KytOClc4ZmRGcG5Nc3ltTU5BYytYWS8xVlZPWUFHTnhzc0ViTWZHWXBIL1d4eFBYQlVwNXhSSHJZSzRMYTR2bjRoRHgKMDBKYkx0eG1HS0tYL1l6aFF1TC9pMmF6YXVPdUFCTFlTaDVZM2tYWlVSYzZwNGtpY0hhd3FWUG1OYVZTd0RlMQp0emdKZFE1bWZwK0Z4Lzh4YksvMC9zNnRzbkViUGdjckd4WDViZTJOZHlqWWpiWVB1YzRXME0vZnhVWGZBZ01CCkFBR2pnYjh3Z2J3d0hRWURWUjBPQkJZRUZPZ3VTMXhId05zdnNtNzVuay96b3ZCSVZTVkhNQjhHQTFVZEl3UVkKTUJhQUZPZ3VTMXhId05zdnNtNzVuay96b3ZCSVZTVkhNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdhUVlEVlIwUgpCR0l3WUlJUUtpNXNkVzFsYm5admVDNWpiRzkxWklJT2JIVnRaVzUyYjNndVkyeHZkV1NDQ1d4dlkyRnNhRzl6CmRJSXhZV1YwYUdWeUxXUnZZMnN1WjJWeWJXRnVlWGRsYzNSalpXNTBjbUZzTG1Oc2IzVmtZWEJ3TG1GNmRYSmwKTG1OdmJUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFyN1FmRjJKNzhYU0RiM0pGbGd0K05Jd3hidTFhRWc0dwpXNFBJTjZjanAwSlkwU1ppZTlwS1lVclI5ODdONW1IM2dFa2RWRHE1TkxlNXg5M3RjOS9NMjFPL0laUERhUTVYCktvekp0WGVvanFOT0JubjBUT3g0RndLWVRjVTVyYTVzUmhvaTdVZUR6dEExTzNvdTBuNE1QZ0hRTmFnRXVBamgKZFp0YVF5SnhFUkRTdmlnMTQxeXdlSnlkdnlzcEd0TmEvb2VyZ284ekNRVWlaSHQ3OUdhSDNvNVkrUEhQYlc5KwpWN2UyUEZFMWdVY2M0L1QwQUJnQk5JZjJvazlYbjFEV0JYMWdkeDhhbUthSWt0MDhqMVljTmN1YVRvalRDaFh5ClV6S0gvWmVOcklhM0xoRmpTa2YrM0tOalFrOUhoWGIrSXBvZlpxUkRZcDVvU3M2eEJmVGRydz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  # certKey: "LS0tLS1CRUdJTiBFTkNSWVBURUQgUFJJVkFURSBLRVktLS0tLQpNSUlGSERCT0Jna3Foa2lHOXcwQkJRMHdRVEFwQmdrcWhraUc5dzBCQlF3d0hBUUlPbnBsakJORmNDd0NBZ2dBCk1Bd0dDQ3FHU0liM0RRSUpCUUF3RkFZSUtvWklodmNOQXdjRUNFWlluVDUxUCtTOUJJSUV5S0czNUV1K05FSXAKUTV3cXhXK0g0WHc4TitSdUZqQXBoUTVxbHJPQjNwV0VFWVhVY2hzN0Npc2NEeldCQmg5OTR5Q2hyT0NQZFgrRgpiWktpMGpVbTNvNjVkS21ZSmNod1VTb2tCdFJvLzNsUVlsR1hSRVFRaUxieFJhcmc5SkJWRjRVdVB2TG1DYW1qCmhNc1A4bHZYVlFZVnFiKzRONWtZT1MxU2FudElpeXRqdmMyR292WmJwUUFWTWc0d202c0VIaUVnWDZ1WHc2V2oKVjZJdkkrbHBXcTUwUnZNQThMNzBkT3JPNGVTRGxRdFc4ekRGMzNBRWxoajMvM05uRWNteHppV3Y4cDlEY2wyRAo1ZlFhMWY0NUpDMGtpeFZ2TC95ZFYvWk1vZkRxSVpyY1B1NE5SSTdoclF5MEZEWkZSME9UaHBjN1BWbG9JeFJmCmdvVnBFeGxkeTdHRkl2c0ljRUlsNGNNZFVGV1JEMDdYaHB3Zys4WFYzKzlEQitTUU9KNXBNbGJMOHAyRGpBVjcKSzJsQTNrRE9NOThsWnlUKzRyTHQweGsxZFRNdjY2Ymhyc1FBZUQwU2dSWWh3dENTejJpVDkxeFoyN2ZHM3dEVQphU1VuWnk3MXUxSzVrcG9xWXlQMFlDS2wxVFllSkZyMGJ2dkZVRGFOTDFNUVNzOWw2REhOWWRjNWdIOGQxWlhFClJxWDNwd2ZYeW1wWnRSWDQvV2ppUWZOenNLYW9TYmE5dGxUK2R2NVYreWJPVm5rd0VHZXBMMkpsSGErYmRVTnMKRS9PM0xGRkNmTjRUcElBdkYwbHRJMHFyRzdvYXRCTGJsT1hIb0JHRS9JWldRRXAyMTRBcUl0R0ZXb3pVVHRqcgplNnVVWUpZUDlzY3laZVJPK04rVHpjYWJJQVZCS3V5VURsTjdYZ2VyZEJnWmpDNC9PanpvaURadVhCR0tvV2VZCk40citYOEYyditxNEUrcStuVTV3MGZzeXBGWXFPUXAySksxNTc4aHZueDA5YnM2ZmpsRzZvU0VMc2hpMDdKUXEKR0oxUUMxQUJ5ZkJLR0NEeFNOU3JKbFFSRXE0a3JRblNhZ1c0dWE1dFh4NlJRK25pUDVVUzJlUzVaWUpvWmRFNAp3TXM5SC9qZnJmMmdwSTVPbWphZjBsRmY5d3pqd09QTWtIN0I0VzNjb3BQTlc4bjdSM2tTRGozbkoyUTAzcy9FCjBpcVFYWjdKZENlTWt6ZDN3dDBsY3NWS1N5cDB3NDFodkIzMXpyY0JMQlc3SXlONWc2RXlNczRPK0llWS9PTG8KM0grNUhnamtHdDR0S09YWWF2N2lKb2JGZ0VKUy9NSlY2dFY5VUY1V0VEWXZiemlHbUpkTlRYQXVXcTllRVV1SAphMDROZFhsb0V5WGxURDhCL0hyQlFwdFFwa0hGVjI1dGF3RXovVCt5b0ZXN3dMQ1lOcG5majE1eCtZMFdwYUk4CnYzVFQwZDRPdlMrUm9saFJVQkNLaHEyZmNWY0FBek55S3V4VUt3TjA4bEh0UnVBUElJa08zSXlIamRkSmx4OXcKTGlQTmtIUWZyS29oSGRNNUx2VFRBcVQxbDAxRk9Oc2dyZmVxZlZSTHZDcGZGQTY3bkNPN00rNmF0dzRuYm4yQwo0ZlJvZjdIZFoxLzZTS0FzZVk1cWRQRjBvTVNOeDdPVjhXclJEaEc1ZitxY08zNW5TUjBHcTd3b3FTQnV6ajVPCmtxVzdlODBaaEZtVUtHM3d3TWRsK09xM3dIRlNRdTRIMWFaMGpXcTE0VkVzRFJ2VXpzZVdKbGZDZGU0c2psUWYKRUp4TUw0V0xZWExzWXhSQUhFcmlZT0Fzd2d0d1owZFV6dGJJRERQNnQ0UlpPMThFdmZiVmI4Z2hCZDJLSXRGWQpGV1oya05tNDU2Y2tjaVBRZmF6bkRzRzg4SFYza2tRUEMya1dKU0I1U3hYREo1STJqanBzaUhDM0RsRUI3eWFyCnVDWVFGK3QzVi9KWkZzNU80WlZYMkxzTWM3MHk3YmVCb0FEcHdXOWVFNDY1bmpTSXU1Tmk3R0hhWEhUcUZNa0oKbnh3U1ZTSUR0ZG15UTFMd1pPNDZqbDE5MU5Wc3YzS21ha2FwL1kyM0Z1L1d4Y0ZHOEdlWk8xMit4cHY3aDZobQpMK1dpV2J5dEh6UFNlL1dCWllnY09BPT0KLS0tLS1FTkQgRU5DUllQVEVEIFBSSVZBVEUgS0VZLS0tLS0K"

mockData:
  enabled: false
  testDataString: ""
  deploymentId: ""
  jsonKeys:
    master: ""
    customer: ""
    emergencyPublic: ""

probes:
  periodSeconds: 5

enableAudit: true


grafana:
  # Specifies whether grafana helm chart should be installed
  enabled: true
  ingress:
    hosts: ['grafana.testmachine.com']
  admin:
    user: "lvuser"
    existingSecret: "grafana-existing-secret"

  config:
    useGrafanaIniFile: true
    grafanaIniConfigMap: grafana-configmap

  datasources:
    secretName: prometheus-grafana-secret

  sidecar:
    dashboards:
      enabled: true
      folder: /opt/bitnami/grafana/public/dashboards

  persistence:
    enabled: false

prometheus:
  # Specifies whether prometheus helm chart should be installed
  enabled: true

  connection:
    url: http://lumenvox-prometheus-server

  server:
    persistentVolume:
      enabled: false
  alertmanager:
    persistentVolume:
      enabled: false

linkerd:
  dashboard:
    # Applies ingress for linkerd dashboard when enabled (true)
    enabled: true
    # Namespace used by linkerd dashboard
    namespace: linkerd-viz
    # Hostname prefix to use for ingress
    hostPrefix: linkerd
    # Opaque secret value for linkerd dashboard ingress
    ingressSecret: YWRtaW46JGFwcjEkbjdDdTZnSGwkRTQ3b2dmN0NPOE5SWWpFakJPa1dNLgoK

  # Whether linkerd is enabled in deployments
  enabled: true
  # ingress mode can be either nginx or traefik
  ingressMode: nginx
  # optional class name to assign to linkerd ingress (i.e. "nginx" for example)
  ingressClassName: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
