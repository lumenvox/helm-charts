apiVersion: apps/v1
kind: Deployment
metadata:
  name: voice-verifier
  namespace: {{ default .Release.Namespace .Values.global.defaultNamespace }}
  labels:
    app: voice-verifier
spec:
  replicas: 1
  selector:
    matchLabels:
      app: voice-verifier
  template:
    metadata:
      labels:
        app: voice-verifier
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '90'
        {{- if .Values.global.linkerd.enabled }}
        linkerd.io/inject: enabled
        {{- end }}
    spec:
      containers:
        - name: voice-verifier
          image: {{ .Values.image.repository | default .Values.global.image.repository }}/cloud-voice-verifier{{ .Values.image.tag | default .Values.global.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default .Values.global.image.pullPolicy }}
          ports:
            - name: metrics
              containerPort: 90
            - name: grpc
              containerPort: 80
          readinessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: {{ .Values.global.lumenvox.service.startDelaySeconds }}
            periodSeconds: {{ .Values.global.lumenvox.probes.periodSeconds }}
          {{- if .Values.global.lumenvox.service.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /health
              port: 90
            initialDelaySeconds: {{ .Values.global.lumenvox.service.startDelaySeconds }}
            periodSeconds: {{ .Values.global.lumenvox.probes.periodSeconds }}
          {{- end }}
          resources:
            requests:
              cpu: 1000m
              memory: 750Mi
            {{- if .Values.global.lumenvox.enforceLimits }}
            limits:
              cpu: 1200m
              memory: 1000Mi
            {{- end }}
          envFrom:
            - configMapRef:
                name: lumenvox-configmap
            {{- if .Values.rabbitmq.auth.existingPasswordSecret }}
            - secretRef:
                name: {{ .Values.rabbitmq.auth.existingPasswordSecret }}
            {{- end }}
          env:
            - name: ENGINE_RESOURCE_SERVICE_MAX_RECEIVE_SIZE
              value: '52428800'
            {{- if not .Values.rabbitmq.auth.existingPasswordSecret }}
            - name: rabbitmq-password
              value: '{{ .Values.rabbitmq.auth.password }}'
            {{- end }}
            - name: RABBIT_MQ_EASY_CONNECTION_STRING
              value: 'host={{ .Values.global.rabbitmq.connection.url }};port={{ .Values.global.rabbitmq.connection.port }};username={{ .Values.global.rabbitmq.connection.user }};password=$(rabbitmq-password);requestedHeartbeat=10'
            - name: DEPLOYMENT_RECONNECTION_TIMEOUT_SECONDS
              value: '{{ .Values.global.lumenvox.deploymentReconnectionTimeoutSec }}'
            - name: SERVICE_ADDRESSES__ENGINE_RESOURCE_SERVICE
              value: 'http://engineresource-service.{{ default .Release.Namespace .Values.global.defaultNamespace }}'
            - name: SERVICE_ADDRESSES__DEPLOYMENT_SERVICE
              value: 'http://deployment-service.{{ default .Release.Namespace .Values.global.defaultNamespace }}'
            - name: SERVICE_START_DELAY_SECONDS
              value: '6'
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
      {{- range .Values.global.imagePullSecrets }}
        - name: {{ . }}
      {{- end}}
      {{- end }}
      initContainers:
        - name: wait-for-deployment-service
          image: {{ .Values.image.repository | default .Values.global.image.repository }}/cloud-init-tools{{ .Values.image.tag | default .Values.global.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default .Values.global.image.pullPolicy }}
          command: ["curl2"]
          args: ["http://deployment-service.{{ default .Release.Namespace .Values.global.defaultNamespace }}:90/health", "Deployment Service"]
