apiVersion: apps/v1
kind: Deployment
metadata:
  name: license
  namespace: {{ default .Release.Namespace .Values.global.defaultNamespace }}
  labels:
    app: license
spec:
  replicas: 1
  selector:
    matchLabels:
      app: license
  template:
    metadata:
      labels:
        app: license
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '5110'
        {{- if .Values.global.linkerd.enabled }}
        linkerd.io/inject: enabled
        {{- end }}
    spec:
      containers:
        - name: license
          image: {{ .Values.image.repository | default .Values.global.image.repository }}/cloud-license{{ .Values.image.tag | default .Values.global.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default .Values.global.image.pullPolicy }}
          ports:
            - name: metrics
              containerPort: 5110
            - name: grpc
              containerPort: 5010
          readinessProbe:
            httpGet:
              path: /health
              port: 5110
            initialDelaySeconds: {{ .Values.global.lumenvox.service.startDelaySeconds }}
            periodSeconds: {{ .Values.global.lumenvox.probes.periodSeconds }}
          {{- if .Values.global.lumenvox.service.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /health
              port: 5110
            initialDelaySeconds: {{ .Values.global.lumenvox.service.startDelaySeconds }}
            periodSeconds: {{ .Values.global.lumenvox.probes.periodSeconds }}
          {{- end }}
          resources:
            requests:
              cpu: 5m
              memory: 30Mi
            {{- if .Values.global.lumenvox.enforceLimits }}
            limits:
              cpu: 100m
              memory: 50Mi
            {{- end }}
          envFrom:
            - configMapRef:
                name: lumenvox-configmap
            - configMapRef:
                name: timezone-configmap
            {{- if .Values.rabbitmq.auth.existingPasswordSecret }}
            - secretRef:
                name: {{ .Values.rabbitmq.auth.existingPasswordSecret }}
            {{- end }}
            {{- if .Values.postgresql.existingSecret }}
            - secretRef:
                name: {{ .Values.postgresql.existingSecret }}
            {{- end }}
          env:
            {{- if not .Values.rabbitmq.auth.existingPasswordSecret }}
            - name: rabbitmq-password
              value: '{{ .Values.rabbitmq.auth.password }}'
            {{- end }}
            {{- if not .Values.postgresql.existingSecret }}
            - name: postgresql-password
              value: "{{ .Values.postgresql.password }}"
            {{- end }}
            - name: GLOBAL_SETTINGS__RABBITMQ_EASY_CONNECTION_STRING
              value: 'host={{ .Values.global.rabbitmq.connection.url }};port={{ .Values.global.rabbitmq.connection.port }};username={{ .Values.global.rabbitmq.connection.user }};password=$(rabbitmq-password);requestedHeartbeat=10'
            - name: SERVICE_ADDRESSES__CONFIGURATION_SERVICE
              value: 'http://configuration-service.{{ default .Release.Namespace .Values.global.defaultNamespace }}'
            - name: SERVICE_ADDRESSES__DEPLOYMENT_SERVICE
              value: 'http://deployment-service.{{ default .Release.Namespace .Values.global.defaultNamespace }}'
            - name: DB_SETTINGS__DEPLOYMENT_RECONNECTION_TIMEOUT_SEC
              value: '{{ .Values.global.lumenvox.deploymentReconnectionTimeoutSec }}'
            - name: DB_SETTINGS__DEPLOYMENT_POSTGRES_CONNECTION_STRING
              value: 'Server={{ .Values.global.postgresql.connection.url }};Port={{ .Values.global.postgresql.connection.port }};User ID={{ .Values.global.postgresql.connection.user }};Password=$(postgresql-password);Database=cloud_deployment_db;Integrated Security=true;Pooling=true;'
            - name: LICENSE_SETTINGS__CLUSTER_GUID
              value: '{{ .Values.licensing.clusterGuid }}'
            - name: LICENSE_SETTINGS__REPORT_FREQUENCY_MINS
              value: '{{ .Values.licensing.reportFreqMins }}'
            - name: LICENSE_SETTINGS__REPORT_SYNC_HOUR
              value: '{{ .Values.licensing.reportSyncHour }}'
            - name: LICENSE_SETTINGS__REPORT_SYNC_MIN
              value: '{{ .Values.licensing.reportSyncMin }}'
            {{- if .Values.licensing.reportEndpoint }}
            - name: LICENSE_SETTINGS__REPORT_ENDPOINT
              value: '{{ .Values.licensing.reportEndpoint }}'
            {{- end }}
            {{ if .Values.licensing.showDebugOutput }}
            - name: LICENSE_SETTINGS__SHOW_DEBUG_OUTPUT
              value: '{{ .Values.licensing.showDebugOutput }}'
            {{- end }}
            - name: GOLANG_PROTOBUF_REGISTRATION_CONFLICT
              value: 'ignore'
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
      {{- range .Values.global.imagePullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      initContainers:
        - name: wait-for-deployment-service
          image: {{ .Values.image.repository | default .Values.global.image.repository }}/cloud-init-tools{{ .Values.image.tag | default .Values.global.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default .Values.global.image.pullPolicy }}
          command: ["curl2"]
          args: ["http://deployment-service.{{ default .Release.Namespace .Values.global.defaultNamespace }}:90/health", "Deployment Service"]
