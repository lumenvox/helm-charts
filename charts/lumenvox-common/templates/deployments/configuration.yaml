apiVersion: apps/v1
kind: Deployment
metadata:
  name: configuration
  namespace: {{ default .Release.Namespace .Values.global.defaultNamespace }}
  labels:
    app: configuration
spec:
  replicas: 1
  selector:
    matchLabels:
      app: configuration
  template:
    metadata:
      labels:
        app: configuration
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '5110'
        {{- if .Values.global.linkerd.enabled }}
        linkerd.io/inject: enabled
        {{- end }}
    spec:
      containers:
        - name: configuration
          image: {{ .Values.image.repository | default .Values.global.image.repository }}/configuration{{ .Values.image.tag | default .Values.global.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default .Values.global.image.pullPolicy }}
          ports:
            - name: grpc
              containerPort: 5000
            - name: http
              containerPort: 5110
          readinessProbe:
            exec:
              command:
              - /usr/bin/configuration
              - --healthcheck
            initialDelaySeconds: {{ .Values.global.lumenvox.service.startDelaySeconds }}
            periodSeconds: {{ .Values.global.lumenvox.probes.periodSeconds }}
          {{- if .Values.global.lumenvox.service.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
              - /usr/bin/configuration
              - --healthcheck
            initialDelaySeconds: {{ .Values.global.lumenvox.service.startDelaySeconds }}
            periodSeconds: {{ .Values.global.lumenvox.probes.periodSeconds }}
          {{- end }}
          resources:
            requests:
              cpu: 10m
              memory: 200Mi
            {{- if .Values.global.lumenvox.enforceLimits }}
            limits:
              cpu: 100m
              memory: 450Mi
            {{- end }}
          envFrom:
            - configMapRef:
                name: lumenvox-configmap
            - configMapRef:
                name: timezone-configmap
            {{- if .Values.global.rabbitmq.auth.existingPasswordSecret }}
            - secretRef:
                name: {{ .Values.global.rabbitmq.auth.existingPasswordSecret }}
            {{- end }}
          env:
            {{- if not .Values.global.rabbitmq.auth.existingPasswordSecret }}
            - name: rabbitmq-password
              value: '{{ .Values.global.rabbitmq.auth.password }}'
            {{- end }}
            - name: GLOBAL_SETTINGS__CLUSTER_LOG_VERBOSITY
              value: '{{ .Values.global.lumenvox.loggingVerbosity }}'
            - name: LICENSE_SETTINGS__CLUSTER_GUID
              value: '{{ .Values.global.licensing.clusterGuid }}'
            - name: REDIS_SETTINGS__DEFAULT_TTL
              value: '{{ .Values.global.lumenvox.redisTtl }}'
            - name: RMQ_CA_CERTIFICATE
              value: '{{ .Values.global.rabbitmq.caCertificate }}'
            - name: RMQ_CLIENT_CERTIFICATE
              value: '{{ .Values.global.rabbitmq.clientCertificate }}'
            - name: RMQ_CLIENT_KEY
              value: '{{ .Values.global.rabbitmq.clientKey }}'
            - name: GLOBAL_SETTINGS__RABBITMQ_CONNECTION_STRING
              value: 'amqp{{ if .Values.global.rabbitmq.enableTLS }}s{{ end }}://{{ .Values.global.rabbitmq.connection.user }}:$(rabbitmq-password)@{{ .Values.global.rabbitmq.connection.url }}:{{ .Values.global.rabbitmq.connection.port }}'
            - name: GLOBAL_SETTINGS__RMQ_QUEUE_EXPIRE_MS
              value: '{{ .Values.global.lumenvox.rabbitmqQueueExpirationMs }}'
            {{- if .Values.global.enabled.lumenvoxSpeech }}
            {{- if .Values.global.asrLanguages }}
            - name: CLUSTER_LANGUAGES__ASR_LANGUAGES
              value: '{{ template "lumenvox-speech.CLUSTER_LANGUAGES__ASR_LANGUAGES" . }}'
            {{- end }}
            {{- if .Values.global.ttsLanguages }}
            - name: CLUSTER_LANGUAGES__TTS_LANGUAGES
              value: '{{ template "lumenvox-speech.CLUSTER_LANGUAGES__TTS_LANGUAGES" . }}'
            - name: CLUSTER_LANGUAGES__TTS_VOICES
              value: '{{ template "lumenvox-speech.CLUSTER_LANGUAGES__TTS_VOICES" . }}'
            {{- end }}
            {{- end }}
            {{- if .Values.global.enabled.lumenvoxVb }}
            - name: CLUSTER_LANGUAGES__VB_ACTIVE
              value: '{{ template "lumenvox-vb.CLUSTER_LANGUAGES__VB_ACTIVE" . }}'
            {{- end }}
            - name: SERVICE_ADDRESSES__DEPLOYMENT_SERVICE
              value: 'http://deployment-service.{{ default .Release.Namespace .Values.global.defaultNamespace }}'
            - name: DB_SETTINGS__DEPLOYMENT_RECONNECTION_TIMEOUT_SEC
              value: '{{ .Values.global.lumenvox.deploymentReconnectionTimeoutSec }}'
            - name: DB_MIGRATION__RUN_DATABASE_MIGRATIONS
              value: '{{ .Values.global.postgresql.runMigrations }}'
            - name: DB_MIGRATION__EXIT_AFTER_DATABASE_MIGRATIONS
              value: '{{ .Values.global.postgresql.exitAfterMigrations }}'
            - name: DB_MIGRATION__DB_COMMAND_TIMEOUT_SECONDS
              value: '{{ .Values.global.postgresql.commandTimeoutSeconds }}'
            - name: LOCAL_SETTINGS__ENABLE_AUDIT_LOG
              value: '{{ .Values.global.lumenvox.enableAudit }}'
            - name: LOCAL_SETTINGS__SERVICE_START_DELAY_SECONDS
              value: '5'
            - name: GOLANG_PROTOBUF_REGISTRATION_CONFLICT
              value: 'ignore'
          volumeMounts:
            - mountPath: /etc/lumenvox/Lang/vb-active
              name: vb-active

      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
      {{- range .Values.global.imagePullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      initContainers:
        - name: wait-for-deployment-service
          image: {{ .Values.image.repository | default .Values.global.image.repository }}/cloud-init-tools{{ .Values.image.tag | default .Values.global.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default .Values.global.image.pullPolicy }}
          command: ["curl2"]
          args: ["http://deployment-service.{{ default .Release.Namespace .Values.global.defaultNamespace }}:5110/health", "Deployment Service"]
        - name: wait-for-rabbitmq-service
          image: {{ .Values.image.repository | default .Values.global.image.repository }}/cloud-init-tools{{ .Values.image.tag | default .Values.global.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default .Values.global.image.pullPolicy }}
          command: ["nslookup2"]
          args: ["{{ .Values.global.rabbitmq.connection.url }}", "RabbitMQ Service"]
        {{- if .Values.global.rabbitmq.init.checkManagementEndpoint }}
        - name: wait-for-rabbitmq-management-endpoint
          image: {{ .Values.image.repository | default .Values.global.image.repository }}/cloud-init-tools{{ .Values.image.tag | default .Values.global.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | default .Values.global.image.pullPolicy }}
          command: ["curl2"]
          args: ["http{{ if .Values.global.rabbitmq.enableTLS }}s{{ end }}://{{ .Values.global.rabbitmq.connection.url }}{{ if not .Values.global.rabbitmq.enableTLS }}:15672{{ end }}", "RabbitMQ Management Page"]
        {{- end }}
      volumes:
        - name: vb-active
          persistentVolumeClaim:
            claimName: vb-active-claim
            readOnly: false
